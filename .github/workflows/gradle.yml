name: Java CI with Gradle

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./user-service 
          file: ./user-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          platforms: linux/amd64,linux/arm64

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-service 
          file: ./ai-service/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ai-service:latest
          platforms: linux/amd64,linux/arm64

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./mcp-service 
          file: ./mcp-service/Dockerfile.chatbot
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/chatbot-api:latest
          platforms: linux/amd64,linux/arm64


      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./mcp-service
          file: ./mcp-service/Dockerfile.mcp
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/mcp-tools:latest
          platforms: linux/amd64,linux/arm64

      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/ec2-user/"    

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            # .env 파일 동적 생성
            cat > .env << EOF
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            NOTION_TOKEN=${{secrets.NOTION_TOKEN}}
            PARENT_PAGE_ID=${{secrets.PARENT_PAGE_ID}}

            EOF

            sudo docker-compose down
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/user-service:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/ai-service:latest
            sudo docker image prune -f
            sudo docker-compose up -d

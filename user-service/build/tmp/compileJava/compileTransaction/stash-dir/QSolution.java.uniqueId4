package com.codenavi.backend.domain;

import static com.querydsl.core.types.PathMetadataFactory.*;

import com.querydsl.core.types.dsl.*;

import com.querydsl.core.types.PathMetadata;
import javax.annotation.processing.Generated;
import com.querydsl.core.types.Path;
import com.querydsl.core.types.dsl.PathInits;


/**
 * QSolution is a Querydsl query type for Solution
 */
@Generated("com.querydsl.codegen.DefaultEntitySerializer")
public class QSolution extends EntityPathBase<Solution> {

    private static final long serialVersionUID = 1198076187L;

    private static final PathInits INITS = PathInits.DIRECT2;

    public static final QSolution solution = new QSolution("solution");

    public final NumberPath<Long> id = createNumber("id", Long.class);

    public final QSolution_Implementation implementation;

    public final ListPath<NotionSyncRecord, QNotionSyncRecord> notionSyncRecords = this.<NotionSyncRecord, QNotionSyncRecord>createList("notionSyncRecords", NotionSyncRecord.class, QNotionSyncRecord.class, PathInits.DIRECT2);

    public final QProblem problem;

    public final QSolution_Status status;

    public final QThinkingProcess thinkingProcess;

    public final QUser user;

    public QSolution(String variable) {
        this(Solution.class, forVariable(variable), INITS);
    }

    public QSolution(Path<? extends Solution> path) {
        this(path.getType(), path.getMetadata(), PathInits.getFor(path.getMetadata(), INITS));
    }

    public QSolution(PathMetadata metadata) {
        this(metadata, PathInits.getFor(metadata, INITS));
    }

    public QSolution(PathMetadata metadata, PathInits inits) {
        this(Solution.class, metadata, inits);
    }

    public QSolution(Class<? extends Solution> type, PathMetadata metadata, PathInits inits) {
        super(type, metadata, inits);
        this.implementation = inits.isInitialized("implementation") ? new QSolution_Implementation(forProperty("implementation")) : null;
        this.problem = inits.isInitialized("problem") ? new QProblem(forProperty("problem"), inits.get("problem")) : null;
        this.status = inits.isInitialized("status") ? new QSolution_Status(forProperty("status")) : null;
        this.thinkingProcess = inits.isInitialized("thinkingProcess") ? new QThinkingProcess(forProperty("thinkingProcess"), inits.get("thinkingProcess")) : null;
        this.user = inits.isInitialized("user") ? new QUser(forProperty("user"), inits.get("user")) : null;
    }

}

